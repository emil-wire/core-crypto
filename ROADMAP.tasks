CoreCrypto:
    Keystore:
        ☐ Study WASM-related limitations of SQLite-backed storage. @high
            * Requires compiling with emscripten for WASM, which artificially inflates the bundle size
            * In an ideal world I'd like to target wasm32-unknown-unknown or wasm32-wasi to limit arcane `emcc` magic
            * Study feasibility of SQLGlue + OTF encrypted flatbuffers
                * 26/01/12: Nope! SQLGlue is async first it seems so that won't do it
            * Update 25/01/22:
                * OpenSSL is the major culprit of WASI incompatibility - fix in progress when I have time
                * SQLite/Cipher makes heavy use of OpenSSL so OSSL is a blocker on that topic
        ✔ Wrap SQLCipher store @done (22-01-12 19:06)
            ✔ Add in-memory store capabilities @done (22-01-12 19:09)
        ✔ MLS @done (22-01-12 19:08)
            ✔ Store keying material @done (22-01-12 19:07)
            ✔ Retrieve keying material @done (22-01-12 19:07)
            ✔ Remove keying material @done (22-01-12 19:07)
            ✔ impl MLS trait @done (22-01-12 19:07)
        ✔ Proteus @done (22-01-12 19:08)
            ✔ Store prekey @done (22-01-12 19:08)
            ✔ Retrieve prekey @done (22-01-12 19:08)
            ✔ impl Proteus trait @done (22-01-12 19:08)
        ✔ Bench @done (22-01-12 19:08)
        ✔ Test @done (22-01-12 19:08)

    MLS Provider:
        ✔ Crypto primitives: RustCrypto backend @done (22-01-12 19:08)
        ✔ Keystore: CoreCrypto Keystore @done (22-01-12 19:08)
            ✔ In-memory mode entrypoint @done (22-01-12 19:09)

    CoreCrypto - Rust:
        ☐ Features
            ☐ Client
                ✔ Generate Client @done (22-01-12 19:02)
                ✔ Generate key material (n number keypackages) @done (22-01-17 18:04)
                ☐ Expose Client abstraction
            ☐ Conversation
                ✔ Create empty conversation @done (22-01-12 19:02)
                ☐ Create conversation with others
                ✔ Encrypt & serialize message @done (22-01-12 19:02)
                ✔ Deserialize & decrypt message @done (22-01-12 19:02)
            ☐ Central
                ✔ Init - db + mls groups in-mem store @done (22-01-12 19:02)
                ✔ Entrypoint for conversation management @done (22-01-12 19:02)
                ☐ Entrypoint for client management
        ☐ Test
        ☐ Bench

    CoreCrypto - FFI:
        ☐ Central
            ☐ Client management
            ☐ Conversation management
        ☐ Bindings
            ☐ Swift
                ✔ Compile @done (22-02-21 10:55)
                ✔ Produce @done (22-01-25 18:19)
                ☐ Test
                ✔ Package in a XCFramework @done (22-02-21 10:55)
                ☐ Package in a Swift package
            ☐ Kotlin
                ✔ Compile @done (22-01-28 10:42)
                ✔ Produce @done (22-01-25 18:19)
                ☐ Test
            ☐ JS/TS
                ☐ Compile to WASM
                ☐ Write TS/JS bindings
                ☐ Test w/ Deno

    CoreCrypto - MLS Test Distribution Service:
        ☐ Core
            ✔ Actix-Web @done (22-01-12 19:20)
            ✔ graphql_async @done (22-01-12 19:20)
            ✔ SeaORM @done (22-01-12 19:20)
            ☐ Redis
        ☐ Features
            ☐ Client
                ✔ Register client with initial keying material @done (22-01-12 19:12)
                ☐ Get keybundle for client / user
            ☐ Conversation
                ☐ Create conversation
                ☐ Add members to conversation
                ☐ Prune keying material when used to add someone to a conversation  @critical
                ☐ Send message
                ☐ Fetch messages

CryptoLib:

    ☐ Capabilities
        ☐ Support Proteus
        ☐ Support MLS
    ☐ KeyStore
        ☐ MUST BE ENCRYPTED (with device key?)
        ☐ Candidates
            ☐ SQLite (rusqlite) + https://github.com/sqlcipher/sqlcipher
                - Super stable
                - Supports WASM
            ☐ GlueSQL?
                - Seems alright and has pluggable storage, meaning we can do OTF encrypt/decrypt file storage
                - Supports WASM OOB
    ☐ Abstract actionable container on the plaintext data contained in the messages
    ☐ Implement Crypto Central that abstract both Proteus and MLS management
    ☐ Reflect events that happen in the group/sessions to respective contexts in the Crypto Central
        ☐ MLS
            ☐ Group events
                ☐ Generic Proposal
                ☐ Added to a group (Welcome)
                ☐ Alteration in group members' composition
                ☐ Group deleted
                ☐ Group Rekeying
        ☐ Proteus
            ☐ Conversation alterations
                ☐ New client added to the conversation (bound to its user? Or is that a privacy concern)
                ☐ Client removed from conversation aka HTTP 412
                ☐ Manual DH key ratchet started (is there a name for this kind of thing? Off-session ratcheting?)
    ☐ Facilities to encrypt/decrypt data using protocol-specific context (aka. Crypto Central)
        ☐ Abstract external parameters (prekeys, group configurations) so that it can be provided transparently, regardless from the protocol, and acted on appropriately
        ☐ If the keystore is managed in CryptoLib, handle key rotation transparently
