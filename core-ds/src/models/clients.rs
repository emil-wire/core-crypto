//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, serde::Serialize)]
#[sea_orm(table_name = "clients")]
pub struct Model {
    #[serde(skip)]
    #[sea_orm(primary_key)]
    pub id: i64,
    #[sea_orm(unique)]
    pub uuid: Uuid,
    #[sea_orm(unique)]
    pub identity: Uuid,
    pub display_name: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::client_keypackages::Entity")]
    ClientKeypackages,
    #[sea_orm(has_many = "super::conversations::Entity")]
    Conversations,
    #[sea_orm(has_many = "super::conversation_members::Entity")]
    ConversationMembers,
}

impl Related<super::client_keypackages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ClientKeypackages.def()
    }
}

impl Related<super::conversations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Conversations.def()
    }
}

impl Related<super::conversation_members::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ConversationMembers.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
