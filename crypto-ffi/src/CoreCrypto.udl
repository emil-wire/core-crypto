[Custom]
typedef string ConversationId;

[Custom]
typedef string MemberId;

[Custom]
typedef string ClientId;

enum CiphersuiteName {
    "MLS_128_DHKEMX25519_AES128GCM_SHA256_Ed25519",
    "MLS_128_DHKEMP256_AES128GCM_SHA256_P256",
    "MLS_128_DHKEMX25519_CHACHA20POLY1305_SHA256_Ed25519",
    "MLS_256_DHKEMX448_AES256GCM_SHA512_Ed448",
    "MLS_256_DHKEMP521_AES256GCM_SHA512_P521",
    "MLS_256_DHKEMX448_CHACHA20POLY1305_SHA512_Ed448",
    "MLS_256_DHKEMP384_AES256GCM_SHA384_P384"
};

[Error]
enum CryptoError {
    "ConversationNotFound",
    "MalformedIdentifier",
    "KeyStoreError",
    "ClientSignatureNotFound",
    "OutOfKeyPackage",
    "LockPoisonError",
    "ConversationConfigurationError",
    "CentralConfigurationError",
    "MlsError",
    "UuidError",
    "Utf8Error",
    "ParseIntError",
    "Other"
};

dictionary ConversationCreationMessage {
    sequence<u8> message;
    sequence<u8> welcome;
};

dictionary Invitee {
    ClientId id;
    sequence<u8> kp;
};

dictionary ConversationConfiguration {
    sequence<Invitee> extra_members;
    sequence<MemberId> admins;
    CiphersuiteName? ciphersuite;
    duration? key_rotation_span;
};

interface CoreCrypto {
    [Throws=CryptoError, Name=new]
    constructor([ByRef] string path, [ByRef] string key, [ByRef] string client_id);

    [Throws=CryptoError]
    ConversationCreationMessage? create_conversation(ConversationId conversation_id, ConversationConfiguration config);

    [Throws=CryptoError]
    sequence<u8>? decrypt_message(ConversationId conversation_id, [ByRef] sequence<u8> payload);

    [Throws=CryptoError]
    sequence<u8> encrypt_message(ConversationId conversation_id, [ByRef] sequence<u8> message);
};

namespace CoreCrypto {
    [Throws=CryptoError]
    CoreCrypto init_with_path_and_key([ByRef] string path, [ByRef] string key, [ByRef] string client_id);

    string version();
};
