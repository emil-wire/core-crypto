[Wrapped]
typedef string ConversationId;

[Wrapped]
typedef string UserId;

[Error]
enum CryptoError {
    "ConversationNotFound",
    "MalformedIdentifier",
    "KeyStoreError",
    "MlsError",
    "UuidError",
    "Utf8Error",
    "Other"
};

dictionary ConversationCreationMessage {
    sequence<u8> message;
    sequence<u8> welcome;
};

dictionary ConversationConfiguration {
    UserId author;
    sequence<UserId> extra_members;
    sequence<UserId> admins;
    string? ciphersuite;
    duration? key_rotation_span;
};

interface CoreCrypto {
    [Throws=CryptoError, Name=new]
    constructor([ByRef] string path, [ByRef] string key);

    [Throws=CryptoError]
    ConversationCreationMessage? create_conversation(ConversationId conversation_id, ConversationConfiguration config);

    [Throws=CryptoError]
    sequence<u8> decrypt_message(ConversationId conversation_id, [ByRef] sequence<u8> payload);

    [Throws=CryptoError]
    sequence<u8> encrypt_message(ConversationId conversation_id, [ByRef] sequence<u8> message);
};

namespace CoreCrypto {
    [Throws=CryptoError]
    CoreCrypto init_with_path_and_key([ByRef] string path, [ByRef] string key);
};
