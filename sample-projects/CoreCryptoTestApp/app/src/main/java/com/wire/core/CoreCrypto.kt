// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package com.wire.core;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.ByReference
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong

// The Rust Buffer and 3 templated methods (alloc, free, reserve).
// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue
    class ByReference : RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_CoreCrypto_2aac_rustbuffer_alloc(size, status).also {
                if(it.data == null) {
                   throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
               }
            }
        }

        internal fun free(buf: ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_CoreCrypto_2aac_rustbuffer_free(buf, status)
        }

        internal fun reserve(buf: ByValue, additional: Int) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_CoreCrypto_2aac_rustbuffer_reserve(buf, additional, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}


// A helper for structured writing of data into a `RustBuffer`.
// This is very similar to `java.nio.ByteBuffer` but it knows how to grow
// the underlying `RustBuffer` on demand.
//
// TODO: we should benchmark writing things into a `RustBuffer` versus building
// up a bytearray and then copying it across.

class RustBufferBuilder() {
    var rbuf = RustBuffer.ByValue()
    var bbuf: ByteBuffer? = null

    init {
        val rbuf = RustBuffer.alloc(16) // Totally arbitrary initial size
        rbuf.writeField("len", 0)
        this.setRustBuffer(rbuf)
    }

    internal fun setRustBuffer(rbuf: RustBuffer.ByValue) {
        this.rbuf = rbuf
        this.bbuf = this.rbuf.data?.getByteBuffer(0, this.rbuf.capacity.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
            it.position(rbuf.len)
        }
    }

    fun finalize() : RustBuffer.ByValue {
        val rbuf = this.rbuf
        // Ensure that the JVM-level field is written through to native memory
        // before turning the buffer, in case its recipient uses it in a context
        // JNA doesn't apply its automatic synchronization logic.
        rbuf.writeField("len", this.bbuf!!.position())
        this.setRustBuffer(RustBuffer.ByValue())
        return rbuf
    }

    fun discard() {
        if(this.rbuf.data != null) {
            // Free the current `RustBuffer`
            RustBuffer.free(this.rbuf)
            // Replace it with an empty RustBuffer.
            this.setRustBuffer(RustBuffer.ByValue())
        }
    }

    internal fun reserve(size: Int, write: (ByteBuffer) -> Unit) {
        // TODO: this will perform two checks to ensure we're not overflowing the buffer:
        // one here where we check if it needs to grow, and another when we call a write
        // method on the ByteBuffer. It might be cheaper to use exception-driven control-flow
        // here, trying the write and growing if it throws a `BufferOverflowException`.
        // Benchmarking needed.
        if (this.bbuf!!.position() + size > this.rbuf.capacity) {
            rbuf.writeField("len", this.bbuf!!.position())
            this.setRustBuffer(RustBuffer.reserve(this.rbuf, size))
        }
        write(this.bbuf!!)
    }

    fun putByte(v: Byte) {
        this.reserve(1) { bbuf ->
            bbuf.put(v)
        }
    }

    fun putShort(v: Short) {
        this.reserve(2) { bbuf ->
            bbuf.putShort(v)
        }
    }

    fun putInt(v: Int) {
        this.reserve(4) { bbuf ->
            bbuf.putInt(v)
        }
    }

    fun putLong(v: Long) {
        this.reserve(8) { bbuf ->
            bbuf.putLong(v)
        }
    }

    fun putFloat(v: Float) {
        this.reserve(4) { bbuf ->
            bbuf.putFloat(v)
        }
    }

    fun putDouble(v: Double) {
        this.reserve(8) { bbuf ->
            bbuf.putDouble(v)
        }
    }

    fun put(v: ByteArray) {
        this.reserve(v.size) { bbuf ->
            bbuf.put(v)
        }
    }
}

// Helpers for reading primitive data types from a bytebuffer.
internal fun<T> liftFromRustBuffer(rbuf: RustBuffer.ByValue, readItem: (ByteBuffer) -> T): T {
    val buf = rbuf.asByteBuffer()!!
    try {
       val item = readItem(buf)
       if (buf.hasRemaining()) {
           throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
       }
       return item
    } finally {
        RustBuffer.free(rbuf)
    }
}

internal fun<T> lowerIntoRustBuffer(v: T, writeItem: (T, RustBufferBuilder) -> Unit): RustBuffer.ByValue {
    // TODO: maybe we can calculate some sort of initial size hint?
    val buf = RustBufferBuilder()
    try {
        writeItem(v, buf)
        return buf.finalize()
    } catch (e: Throwable) {
        buf.discard()
        throw e
    }
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Int = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    fun isSuccess(): Boolean {
        return code == 0
    }

    fun isError(): Boolean {
        return code == 1
    }

    fun isPanic(): Boolean {
        return code == 2
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus();
    val return_value = callback(status)
    if (status.isSuccess()) {
        return return_value
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(String.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback);
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "core_crypto_ffi"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "CoreCrypto")
            
            
        }
    }

    fun ffi_CoreCrypto_2aac_CoreCrypto_object_free(ptr: Pointer,
    uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_2aac_CoreCrypto_new(path: RustBuffer.ByValue, key: RustBuffer.ByValue, client_id: RustBuffer.ByValue,
                                       uniffi_out_err: RustCallStatus
    ): Pointer

    fun CoreCrypto_2aac_CoreCrypto_create_conversation(ptr: Pointer, conversation_id: RustBuffer.ByValue, config: RustBuffer.ByValue,
                                                       uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_2aac_CoreCrypto_decrypt_message(ptr: Pointer, conversation_id: RustBuffer.ByValue, payload: RustBuffer.ByValue,
                                                   uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_2aac_CoreCrypto_encrypt_message(ptr: Pointer, conversation_id: RustBuffer.ByValue, message: RustBuffer.ByValue,
                                                   uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_2aac_init_with_path_and_key(path: RustBuffer.ByValue, key: RustBuffer.ByValue, client_id: RustBuffer.ByValue,
                                               uniffi_out_err: RustCallStatus
    ): Pointer

    fun CoreCrypto_2aac_version(
    uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_CoreCrypto_2aac_rustbuffer_alloc(size: Int,
    uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_CoreCrypto_2aac_rustbuffer_from_bytes(bytes: ForeignBytes.ByValue,
                                                  uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_CoreCrypto_2aac_rustbuffer_free(buf: RustBuffer.ByValue,
                                            uniffi_out_err: RustCallStatus
    ): Unit

    fun ffi_CoreCrypto_2aac_rustbuffer_reserve(buf: RustBuffer.ByValue, additional: Int,
                                               uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    
}

// Public interface members begin here.

// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so will
//     leak the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// In the future we may be able to replace some of this with automatic finalization logic, such as using
// the new "Cleaner" functionaility in Java 9. The above scheme has been designed to work even if `destroy` is
// invoked by garbage-collection machinery rather than by calling code (which by the way, it's apparently also
// possible for the JVM to finalize an object while there is an in-flight call to one of its methods [1],
// so there would still be some complexity here).
//
// Sigh...all of this for want of a robust finalization mechanism.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject(
    protected val pointer: Pointer
): Disposable, AutoCloseable {

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    open protected fun freeRustArcPtr() {
        // To be overridden in subclasses.
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.pointer)
        } finally {
            // This decrement aways matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }
}



enum class CiphersuiteName {
    MLS10_128_DHKEMX25519_AES128GCM_SHA256_ED25519,MLS10_128_DHKEMP256_AES128GCM_SHA256_P256,MLS10_128_DHKEMX25519_CHACHA20POLY1305_SHA256_ED25519,MLS10_256_DHKEMX448_AES256GCM_SHA512_ED448,MLS10_256_DHKEMP521_AES256GCM_SHA512_P521,MLS10_256_DHKEMX448_CHACHA20POLY1305_SHA512_ED448,MLS10_256_DHKEMP384_AES256GCM_SHA384_P384;

    companion object {
        internal fun lift(rbuf: RustBuffer.ByValue): CiphersuiteName {
            return liftFromRustBuffer(rbuf) { buf -> read(buf) }
        }

        internal fun read(buf: ByteBuffer) =
            try { values()[buf.getInt() - 1] }
            catch (e: IndexOutOfBoundsException) {
                throw RuntimeException("invalid enum value, something is very wrong!!", e)
            }
    }

    internal fun lower(): RustBuffer.ByValue {
        return lowerIntoRustBuffer(this, {v, buf -> v.write(buf)})
    }

    internal fun write(buf: RustBufferBuilder) {
        buf.putInt(this.ordinal + 1)
    }
}



@Throws(CryptoException::class)

fun initWithPathAndKey(path: String, key: String, clientId: String ): CoreCrypto {
    val _retval = 
    rustCallWithError(CryptoException) { status ->
    _UniFFILib.INSTANCE.CoreCrypto_2aac_init_with_path_and_key(path.lower(), key.lower(), clientId.lower() ,status)
}
    return CoreCrypto.lift(_retval)
}



fun version(): String {
    val _retval = 
    rustCall() { status ->
    _UniFFILib.INSTANCE.CoreCrypto_2aac_version(status)
}
    return String.lift(_retval)
}


public interface CoreCryptoInterface {
    
    @Throws(CryptoException::class)
    fun createConversation(conversationId: String, config: ConversationConfiguration): ConversationCreationMessage?
    
    @Throws(CryptoException::class)
    fun decryptMessage(conversationId: String, payload: List<UByte> ): List<UByte>?
    
    @Throws(CryptoException::class)
    fun encryptMessage(conversationId: String, message: List<UByte> ): List<UByte>
    
}

class CoreCrypto(
    pointer: Pointer
) : FFIObject(pointer), CoreCryptoInterface {
    constructor(path: String, key: String, clientId: String ) :
        this(
    rustCallWithError(CryptoException) { status ->
    _UniFFILib.INSTANCE.CoreCrypto_2aac_CoreCrypto_new(path.lower(), key.lower(), clientId.lower() ,status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_CoreCrypto_2aac_CoreCrypto_object_free(this.pointer, status)
        }
    }

    internal fun lower(): Pointer = callWithPointer { it }

    internal fun write(buf: RustBufferBuilder) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(this.lower()))
    }

    
    @Throws(CryptoException::class)override fun createConversation(conversationId: String, config: ConversationConfiguration): ConversationCreationMessage? =
        callWithPointer {
    rustCallWithError(CryptoException) { status ->
    _UniFFILib.INSTANCE.CoreCrypto_2aac_CoreCrypto_create_conversation(it, conversationId.lower(), config.lower() , status)
}
        }.let {
            liftOptionalRecordConversationCreationMessage(it)
        }
    
    
    @Throws(CryptoException::class)override fun decryptMessage(conversationId: String, payload: List<UByte> ): List<UByte>? =
        callWithPointer {
    rustCallWithError(CryptoException) { status ->
    _UniFFILib.INSTANCE.CoreCrypto_2aac_CoreCrypto_decrypt_message(it, conversationId.lower(), lowerSequenceUByte(payload) , status)
}
        }.let {
            liftOptionalSequenceUByte(it)
        }
    
    
    @Throws(CryptoException::class)override fun encryptMessage(conversationId: String, message: List<UByte> ): List<UByte> =
        callWithPointer {
    rustCallWithError(CryptoException) { status ->
    _UniFFILib.INSTANCE.CoreCrypto_2aac_CoreCrypto_encrypt_message(it, conversationId.lower(), lowerSequenceUByte(message) , status)
}
        }.let {
            liftSequenceUByte(it)
        }
    
    

    companion object {
        internal fun lift(ptr: Pointer): CoreCrypto {
            return CoreCrypto(ptr)
        }

        internal fun read(buf: ByteBuffer): CoreCrypto {
            // The Rust code always writes pointers as 8 bytes, and will
            // fail to compile if they don't fit.
            return lift(Pointer(buf.getLong()))
        }

        
    }
}

data class ConversationCreationMessage (
    var message: List<UByte>, 
    var welcome: List<UByte> 
)  {
    companion object {
        internal fun lift(rbuf: RustBuffer.ByValue): ConversationCreationMessage {
            return liftFromRustBuffer(rbuf) { buf -> read(buf) }
        }

        internal fun read(buf: ByteBuffer): ConversationCreationMessage {
            return ConversationCreationMessage(
            readSequenceUByte(buf),
            readSequenceUByte(buf)
            )
        }
    }

    internal fun lower(): RustBuffer.ByValue {
        return lowerIntoRustBuffer(this, {v, buf -> v.write(buf)})
    }

    internal fun write(buf: RustBufferBuilder) {
            writeSequenceUByte(this.message, buf)
        
            writeSequenceUByte(this.welcome, buf)
        
    }

    
    
}

data class Invitee (
    var id: String, 
    var kp: List<UByte> 
)  {
    companion object {
        internal fun lift(rbuf: RustBuffer.ByValue): Invitee {
            return liftFromRustBuffer(rbuf) { buf -> read(buf) }
        }

        internal fun read(buf: ByteBuffer): Invitee {
            return Invitee(
            String.read(buf),
            readSequenceUByte(buf)
            )
        }
    }

    internal fun lower(): RustBuffer.ByValue {
        return lowerIntoRustBuffer(this, {v, buf -> v.write(buf)})
    }

    internal fun write(buf: RustBufferBuilder) {
            this.id.write(buf)
        
            writeSequenceUByte(this.kp, buf)
        
    }

    
    
}

data class ConversationConfiguration (
    var extraMembers: List<Invitee>,
    var admins: List<String>,
    var ciphersuite: CiphersuiteName?,
    var keyRotationSpan: java.time.Duration? 
)  {
    companion object {
        internal fun lift(rbuf: RustBuffer.ByValue): ConversationConfiguration {
            return liftFromRustBuffer(rbuf) { buf -> read(buf) }
        }

        internal fun read(buf: ByteBuffer): ConversationConfiguration {
            return ConversationConfiguration(
            readSequenceRecordInvitee(buf),
            readSequenceMemberId(buf),
            readOptionalEnumCiphersuiteName(buf),
            readOptionalDuration(buf)
            )
        }
    }

    internal fun lower(): RustBuffer.ByValue {
        return lowerIntoRustBuffer(this, {v, buf -> v.write(buf)})
    }

    internal fun write(buf: RustBufferBuilder) {
            writeSequenceRecordInvitee(this.extraMembers, buf)
        
            writeSequenceMemberId(this.admins, buf)
        
            writeOptionalEnumCiphersuiteName(this.ciphersuite, buf)
        
            writeOptionalDuration(this.keyRotationSpan, buf)
        
    }

    
    
}



sealed class CryptoException(message: String): Exception(message)  {
        // Each variant is a nested class
        // Flat enums carries a string error message, so no special implementation is necessary.
        class ConversationNotFound(message: String) : CryptoException(message)
        class MalformedIdentifier(message: String) : CryptoException(message)
        class KeyStoreException(message: String) : CryptoException(message)
        class ClientSignatureNotFound(message: String) : CryptoException(message)
        class OutOfKeyPackage(message: String) : CryptoException(message)
        class LockPoisonException(message: String) : CryptoException(message)
        class ConversationConfigurationException(message: String) : CryptoException(message)
        class CentralConfigurationException(message: String) : CryptoException(message)
        class MlsException(message: String) : CryptoException(message)
        class UuidException(message: String) : CryptoException(message)
        class Utf8Exception(message: String) : CryptoException(message)
        class ParseIntException(message: String) : CryptoException(message)
        class Other(message: String) : CryptoException(message)
        

    companion object ErrorHandler : CallStatusErrorHandler<CryptoException> {
        override fun lift(error_buf: RustBuffer.ByValue): CryptoException {
            return liftFromRustBuffer(error_buf) { error_buf -> read(error_buf) }
        }

        fun read(error_buf: ByteBuffer): CryptoException {
            
                return when(error_buf.getInt()) {
                1 -> ConversationNotFound(String.read(error_buf))
                2 -> MalformedIdentifier(String.read(error_buf))
                3 -> KeyStoreException(String.read(error_buf))
                4 -> ClientSignatureNotFound(String.read(error_buf))
                5 -> OutOfKeyPackage(String.read(error_buf))
                6 -> LockPoisonException(String.read(error_buf))
                7 -> ConversationConfigurationException(String.read(error_buf))
                8 -> CentralConfigurationException(String.read(error_buf))
                9 -> MlsException(String.read(error_buf))
                10 -> UuidException(String.read(error_buf))
                11 -> Utf8Exception(String.read(error_buf))
                12 -> ParseIntException(String.read(error_buf))
                13 -> Other(String.read(error_buf))
                else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
            }
        }
    }

    
    
}
internal fun UByte.Companion.lift(v: Byte): UByte {
    return v.toUByte()
}

internal fun UByte.Companion.read(buf: ByteBuffer): UByte {
    return UByte.lift(buf.get())
}

internal fun UByte.lower(): Byte {
    return this.toByte()
}

internal fun UByte.write(buf: RustBufferBuilder) {
    buf.putByte(this.toByte())
}
internal fun String.Companion.lift(rbuf: RustBuffer.ByValue): String {
    try {
        val byteArr = ByteArray(rbuf.len)
        rbuf.asByteBuffer()!!.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    } finally {
        RustBuffer.free(rbuf)
    }
}

internal fun String.Companion.read(buf: ByteBuffer): String {
    val len = buf.getInt()
    val byteArr = ByteArray(len)
    buf.get(byteArr)
    return byteArr.toString(Charsets.UTF_8)
}

internal fun String.lower(): RustBuffer.ByValue {
    val byteArr = this.toByteArray(Charsets.UTF_8)
    // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
    // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
    val rbuf = RustBuffer.alloc(byteArr.size)
    rbuf.asByteBuffer()!!.put(byteArr)
    return rbuf
}

internal fun String.write(buf: RustBufferBuilder) {
    val byteArr = this.toByteArray(Charsets.UTF_8)
    buf.putInt(byteArr.size)
    buf.put(byteArr)
}

internal fun liftDuration(rbuf: RustBuffer.ByValue): java.time.Duration {
    return liftFromRustBuffer(rbuf) { buf ->
        readDuration(buf)
    }
}

internal fun readDuration(buf: ByteBuffer): java.time.Duration {
    // Type mismatch (should be u64) but we check for overflow/underflow below
    val seconds = buf.getLong()
    // Type mismatch (should be u32) but we check for overflow/underflow below
    val nanoseconds = buf.getInt().toLong()
    if (seconds < 0) {
        throw java.time.DateTimeException("Duration exceeds minimum or maximum value supported by uniffi")
    }
    if (nanoseconds < 0) {
        throw java.time.DateTimeException("Duration nanoseconds exceed minimum or maximum supported by uniffi")
    }
    return java.time.Duration.ofSeconds(seconds, nanoseconds)
}

internal fun lowerDuration(v: java.time.Duration): RustBuffer.ByValue {
    return lowerIntoRustBuffer(v) { v, buf ->
        writeDuration(v, buf)
    }
}

internal fun writeDuration(v: java.time.Duration, buf: RustBufferBuilder) {
    if (v.seconds < 0) {
        // Rust does not support negative Durations
        throw IllegalArgumentException("Invalid duration, must be non-negative")
    }

    if (v.nano < 0) {
        // Java docs provide guarantee that nano will always be positive, so this should be impossible
        // See: https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html
        throw IllegalArgumentException("Invalid duration, nano value must be non-negative")
    }

    // Type mismatch (should be u64) but since Rust doesn't support negative durations we should be OK
    buf.putLong(v.seconds)
    // Type mismatch (should be u32) but since values will always be between 0 and 999,999,999 it should be OK
    buf.putInt(v.nano)
}
// Helper code for CoreCrypto class is found in ObjectTemplate.kt
// Helper code for ConversationConfiguration record is found in RecordTemplate.kt
// Helper code for ConversationCreationMessage record is found in RecordTemplate.kt
// Helper code for Invitee record is found in RecordTemplate.kt
// Helper code for CiphersuiteName enum is found in EnumTemplate.kt
// Helper code for CryptoException error is found in ErrorTemplate.kt


// Helper functions for passing values of type java.time.Duration?
internal fun lowerOptionalDuration(v: java.time.Duration?): RustBuffer.ByValue {
    return lowerIntoRustBuffer(v) { v, buf ->
        writeOptionalDuration(v, buf)
    }
}

internal fun writeOptionalDuration(v: java.time.Duration?, buf: RustBufferBuilder) {
    if (v == null) {
        buf.putByte(0)
    } else {
        buf.putByte(1)
        writeDuration(v, buf)
    }
}

internal fun liftOptionalDuration(rbuf: RustBuffer.ByValue): java.time.Duration? {
    return liftFromRustBuffer(rbuf) { buf ->
        readOptionalDuration(buf)
    }
}

internal fun readOptionalDuration(buf: ByteBuffer): java.time.Duration? {
    if (buf.get().toInt() == 0) {
        return null
    }
    return readDuration(buf)
}


// Helper functions for passing values of type ConversationCreationMessage?
internal fun lowerOptionalRecordConversationCreationMessage(v: ConversationCreationMessage?): RustBuffer.ByValue {
    return lowerIntoRustBuffer(v) { v, buf ->
        writeOptionalRecordConversationCreationMessage(v, buf)
    }
}

internal fun writeOptionalRecordConversationCreationMessage(v: ConversationCreationMessage?, buf: RustBufferBuilder) {
    if (v == null) {
        buf.putByte(0)
    } else {
        buf.putByte(1)
        v.write(buf)
    }
}

internal fun liftOptionalRecordConversationCreationMessage(rbuf: RustBuffer.ByValue): ConversationCreationMessage? {
    return liftFromRustBuffer(rbuf) { buf ->
        readOptionalRecordConversationCreationMessage(buf)
    }
}

internal fun readOptionalRecordConversationCreationMessage(buf: ByteBuffer): ConversationCreationMessage? {
    if (buf.get().toInt() == 0) {
        return null
    }
    return ConversationCreationMessage.read(buf)
}


// Helper functions for passing values of type CiphersuiteName?
internal fun lowerOptionalEnumCiphersuiteName(v: CiphersuiteName?): RustBuffer.ByValue {
    return lowerIntoRustBuffer(v) { v, buf ->
        writeOptionalEnumCiphersuiteName(v, buf)
    }
}

internal fun writeOptionalEnumCiphersuiteName(v: CiphersuiteName?, buf: RustBufferBuilder) {
    if (v == null) {
        buf.putByte(0)
    } else {
        buf.putByte(1)
        v.write(buf)
    }
}

internal fun liftOptionalEnumCiphersuiteName(rbuf: RustBuffer.ByValue): CiphersuiteName? {
    return liftFromRustBuffer(rbuf) { buf ->
        readOptionalEnumCiphersuiteName(buf)
    }
}

internal fun readOptionalEnumCiphersuiteName(buf: ByteBuffer): CiphersuiteName? {
    if (buf.get().toInt() == 0) {
        return null
    }
    return CiphersuiteName.read(buf)
}


// Helper functions for passing values of type List<UByte>?
internal fun lowerOptionalSequenceUByte(v: List<UByte>?): RustBuffer.ByValue {
    return lowerIntoRustBuffer(v) { v, buf ->
        writeOptionalSequenceUByte(v, buf)
    }
}

internal fun writeOptionalSequenceUByte(v: List<UByte>?, buf: RustBufferBuilder) {
    if (v == null) {
        buf.putByte(0)
    } else {
        buf.putByte(1)
        writeSequenceUByte(v, buf)
    }
}

internal fun liftOptionalSequenceUByte(rbuf: RustBuffer.ByValue): List<UByte>? {
    return liftFromRustBuffer(rbuf) { buf ->
        readOptionalSequenceUByte(buf)
    }
}

internal fun readOptionalSequenceUByte(buf: ByteBuffer): List<UByte>? {
    if (buf.get().toInt() == 0) {
        return null
    }
    return readSequenceUByte(buf)
}


// Helper functions for passing values of type List<UByte>
internal fun lowerSequenceUByte(v: List<UByte>): RustBuffer.ByValue {
    return lowerIntoRustBuffer(v) { v, buf ->
        writeSequenceUByte(v, buf)
    }
}

internal fun writeSequenceUByte(v: List<UByte>, buf: RustBufferBuilder) {
    buf.putInt(v.size)
    v.forEach {
        it.write(buf)
    }
}

internal fun liftSequenceUByte(rbuf: RustBuffer.ByValue): List<UByte> {
    return liftFromRustBuffer(rbuf) { buf ->
        readSequenceUByte(buf)
    }
}

internal fun readSequenceUByte(buf: ByteBuffer): List<UByte> {
    val len = buf.getInt()
    return List<UByte>(len) {
        UByte.read(buf)
    }
}


// Helper functions for passing values of type List<Invitee>
internal fun lowerSequenceRecordInvitee(v: List<Invitee>): RustBuffer.ByValue {
    return lowerIntoRustBuffer(v) { v, buf ->
        writeSequenceRecordInvitee(v, buf)
    }
}

internal fun writeSequenceRecordInvitee(v: List<Invitee>, buf: RustBufferBuilder) {
    buf.putInt(v.size)
    v.forEach {
        it.write(buf)
    }
}

internal fun liftSequenceRecordInvitee(rbuf: RustBuffer.ByValue): List<Invitee> {
    return liftFromRustBuffer(rbuf) { buf ->
        readSequenceRecordInvitee(buf)
    }
}

internal fun readSequenceRecordInvitee(buf: ByteBuffer): List<Invitee> {
    val len = buf.getInt()
    return List<Invitee>(len) {
        Invitee.read(buf)
    }
}


// Helper functions for passing values of type List<String>
internal fun lowerSequenceMemberId(v: List<String>): RustBuffer.ByValue {
    return lowerIntoRustBuffer(v) { v, buf ->
        writeSequenceMemberId(v, buf)
    }
}

internal fun writeSequenceMemberId(v: List<String>, buf: RustBufferBuilder) {
    buf.putInt(v.size)
    v.forEach {
        it.write(buf)
    }
}

internal fun liftSequenceMemberId(rbuf: RustBuffer.ByValue): List<String> {
    return liftFromRustBuffer(rbuf) { buf ->
        readSequenceMemberId(buf)
    }
}

internal fun readSequenceMemberId(buf: ByteBuffer): List<String> {
    val len = buf.getInt()
    return List<String>(len) {
        String.read(buf)
    }
}

